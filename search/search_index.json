{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p><code>esgpull</code> is a modern ESGF data management tool, bundled with a custom asynchronous interface with the ESGF Search API. It handles scanning, downloading and updating datasets, files and queries from ESGF.</p>"},{"location":"#feature-highlight","title":"Feature highlight","text":"<ul> <li>Simple syntax for fast data exploration</li> <li>Asynchronous download</li> <li>Highly configurable</li> </ul> <p>Search datasets</p> <p><code>esgpull</code> allows multiple ways for searching ESGF data, with facet and free-text terms together with options.</p> Facet termsFree-text termsFacets hintsHintsFiner grain queryDate filter <p>Query every CMIP6 dataset using facet syntax<pre><code>esgpull search project:CMIP6\n</code></pre> </p> <p>Narrow down the results with free-text term 'temperature'<pre><code>esgpull search project:CMIP6 temperature\n</code></pre> </p> <p>Find out which facets remain to be set with --facets<pre><code>esgpull search project:CMIP6 temperature --facets\n</code></pre> </p> <p>Get every potential facet value for the current query with --hints<pre><code>esgpull search project:CMIP6 temperature --hints variable_id\n</code></pre> </p> <p>Query all CMIP6 datasets with variable 'tas'<pre><code>esgpull search project:CMIP6 variable_id:tas\n</code></pre> </p> <p>Query CMIP6 datasets with variable 'tas' published since Jan 1st, 2023<pre><code>esgpull search project:CMIP6 variable_id:tas --from 2023-01-01\n</code></pre> </p>"},{"location":"#setup","title":"Setup","text":"<p>Run <code>pip install esgpull</code> to install the latest release and its dependencies.</p> <p>Have a look at the Installation page for more ways to install.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Jump directly to the Quickstart guide to get to know how to use <code>esgpull</code>.</p>"},{"location":"download/","title":"Download","text":"<p>With <code>esgpull</code>, downloading files is done after a few steps gradually altering the state of the query that is to be downloaded.</p> <p>Datasets or files?</p> <p>In the search page, we only talked about datasets, whereas this document mentions files.</p> <p>For searching, datasets are used by default, since each file in a single dataset holds the same metadata. Then it makes sense to show datasets when exploring data.</p> <p><code>esgpull</code> only uses files in the database and for everything related to download.</p> <p>To make things easier to explain, we will use the following example query in this document:</p> <p><pre><code>esgpull search project:CMIP6 experiment_id:historical institution_id:IPSL variable_id:tas table_id:Amon member_id:r1i1p1f1 --distrib true --show\n</code></pre> </p> <p>Our query, named <code>&lt;7fd1f2&gt;</code>, corresponds to the following 15 datasets: </p>"},{"location":"download/#adding-a-query","title":"Adding a query","text":"<p>The first necessary step is to add <code>&lt;7fd1f2&gt;</code> to the database. Simply replace <code>search</code> with <code>add</code> and remove any flags specific to the search command, in our case we need to remove <code>--show</code>.</p> <p><pre><code>esgpull add project:CMIP6 experiment_id:historical institution_id:IPSL variable_id:tas table_id:Amon member_id:r1i1p1f1 --distrib true\n</code></pre> </p> <p>Option flags</p> <p>Notice how we keep the <code>--distrib true</code> option flag. This is due to the fact that options (<code>distrib</code>, <code>latest</code>, <code>replicas</code>, <code>retracted</code>) are part of the query, since different values on these optoins yield different sets of files.</p> <p><code>&lt;7fd1f2&gt;</code> is now stored in the database, but it remains untracked.</p>"},{"location":"download/#tracking-a-query","title":"Tracking a query","text":"<p>A query is untracked by default, to prevent downloading too much data by mistake. When a query is tracked, it will always be checked for new files on later usage of the <code>update</code> command, if it is provided no arguments.</p> <p>There are 2 ways to track a query:</p> <ul> <li>use the <code>track</code> command with the query id as an argument,</li> <li>use the <code>--track</code> flag on the <code>add</code> command to have it tracked directly.</li> </ul> <p><pre><code>esgpull track 7fd1f2\n</code></pre> </p>"},{"location":"download/#updating-a-query","title":"Updating a query","text":"<p>To associate a query with actual files, it needs to be updated.</p> <p>Updating a query will send requests to the ESGF search api to fetch metadata for each file corresponding to the query. Any file that is not already in the database is added and linked to the query. Files already in the database are simply linked to the query. This would happen for example if a file was previously fetched with another query.</p> <p>For those familiar with package managers such as <code>apt</code>, the <code>update</code> command should feel familiar with how those require update lists to fetch latest versions of packages before actually downloading (and installing in this case).</p> <p><pre><code>esgpull update 7fd1f2\n</code></pre> </p> <p>Replicas</p> <p>For this update, only 3 files were found from the initial 15, this is due to most of them being replicas.</p> <p>Currently the choice of data node from which to download the files is simply whichever comes first.</p>"},{"location":"download/#downloading","title":"Downloading","text":"<p>All that remains after these steps is to download the files:</p> <p><pre><code>esgpull download\n</code></pre> </p>"},{"location":"download/#configuration","title":"Configuration","text":"<p>RAM usage for downloads is bounded by the following formula:</p> <pre><code>RAM = Config::download.max_concurrent * Config::download.chunk_size\n</code></pre>"},{"location":"download/#failed-downloads","title":"Failed downloads","text":"<p>For each failed download, their status will be set to error.</p> <p>Those can be put back to the download queue, by using the <code>retry</code> command.</p> <p><pre><code>esgpull retry --help\n</code></pre> <pre><code>Usage: esgpull retry [OPTIONS] [[new|queued|starting|started|pausing|paused|er\n                     ror|cancelled|done]]...\n\nOptions:\n  -a, --all\n  -v\n  -h, --help  Show this message and exit.\n</code></pre></p> <p>Cancelled download</p> <p>If <code>esgpull</code> has been stopped with with Ctrl+C while downloading, all incomplete downloads will have the <code>cancelled</code> status.</p> <p>By default, <code>retry</code> will put both error and cancelled downloads back to the queue.</p> <p>Unexpected errors</p> <p>Some unexpected errors might break <code>esgpull</code>. In this case, the downloads will stay in a transient status starting.</p> <p>The <code>retry</code> command will not send those to the queue by default. It can still be done using either:</p> <ul> <li><code>esgpull retry starting</code> to send only those back to the queue</li> <li><code>esgpull retry --all</code> to send every download back to the queue (except <code>done</code> downloads of course)</li> </ul>"},{"location":"glossary/","title":"Glossary","text":"Dataset collection of files. Described by metadata that follows its project's conventions. Facet basic element of a dataset's metadata. Pair of strings in the form <code>name:value</code>, equivalent to a python dictionary's item."},{"location":"installation/","title":"Installation","text":"<p>This document covers a few ways to install <code>esgpull</code>, a necessary first step into being able search and download ESGF datasets.</p>"},{"location":"installation/#python-version","title":"Python version","text":"<p><code>esgpull</code> only supports python 3.10 and newer.</p> <p>Supporting lower python versions could be done with future releases, do not hesitate to ask for it.</p>"},{"location":"installation/#setup","title":"Setup","text":"<p>Installing <code>esgpull</code> is the first step to using it, but not the only one.</p> Once you have installed the <code>esgpull</code> package, make sure to read this section. <p>Only a few <code>esgpull</code> commands work out of the box, namely <code>search</code> and <code>convert</code>.</p> <p>To use the full set of functionalities, you will need to setup a local install with:</p> <pre><code>esgpull self install\n</code></pre>"},{"location":"installation/#why-do-i-need-to-install-twice","title":"Why do I need to install twice ?","text":"<p>The reason is that <code>esgpull</code> is prevented from writing anything on disk until installed.</p> <p>Installing <code>esgpull</code> equates choosing a directory in which it is allowed to write anything it needs to run properly. It also creates all the required files/directories in that directory and fetches some metadata from ESGF that is required to run properly.</p>"},{"location":"installation/#multiple-installs","title":"Multiple installs","text":"<p>It is possible to have multiple installs, which allows using multiple configurations on the same machine.</p> <p>Installing in a directory which is an existing <code>esgpull</code> install is possible and intended. It allows sharing a single configuration across multiple users.</p>"},{"location":"installation/#deleting-an-install","title":"Deleting an install","text":"<p>To delete an <code>esgpull</code> install, it is required that this install is active.</p> <p>Deleting does not <code>rm</code> any file, it only removes the option to use this install.</p> <pre><code>esgpull self choose &lt;path/to/install&gt;\nesgpull self delete\n</code></pre>"},{"location":"installation/#installing-with-conda-mamba","title":"Installing with conda / mamba","text":"<p>To install <code>esgpull</code> in a new <code>conda</code> environment, run:</p> <pre><code>conda create --name my_env_name esgpull --channel ipsl\n</code></pre> <p>For <code>mamba</code> users:</p> <pre><code>mamba create --name my_env_name esgpull --channel ipsl\n</code></pre> <p>You can start using <code>esgpull</code> after activating the environment:</p> <pre><code>conda activate my_env_name\nesgpull --version\n</code></pre>"},{"location":"installation/#install-with-pip","title":"Install with pip","text":"<p>Make sure your python version meets the requirements (&gt;=3.10), then you can run:</p> Install esgpull from pip<pre><code>pip install git+https://github.com/ESGF/esgf-download\n</code></pre>"},{"location":"installation/#install-from-source","title":"Install from source","text":"<p>Esgpull is developed and maintained on GitHub, you can clone the public repository with:</p> <pre><code>git clone https://github.com/ESGF/esgf-download\n</code></pre> <p>And then install with <code>pip</code>:</p> <pre><code>cd esg-pull\npython -m pip install .\n</code></pre>"},{"location":"queries/","title":"Queries","text":"<p>Queries are first-class in esgpull.</p>"},{"location":"queries/#database-schema","title":"Database schema","text":"<p>For reference</p> <pre><code>erDiagram\n\n  query {\n    BOOLEAN tracked\n    VARCHAR require\n    VARCHAR options_sha FK\n    VARCHAR select_sha FK\n    VARCHAR sha PK\n  }\n\n  options {\n    VARCHAR distrib\n    VARCHAR latest\n    VARCHAR replica\n    VARCHAR retracted\n    VARCHAR sha PK\n  }\n\n  select {\n    VARCHAR sha PK\n  }\n\n  select_facet {\n    VARCHAR select_sha PK\n    VARCHAR facet_sha PK\n  }\n\n  facet {\n    VARCHAR name\n    VARCHAR value\n    VARCHAR sha PK\n  }\n\n  query_tag {\n    VARCHAR query_sha PK\n    VARCHAR tag_sha PK\n  }\n\n  tag {\n    VARCHAR name\n    TEXT description\n    VARCHAR sha PK\n  }\n\n  query_file {\n    VARCHAR query_sha PK\n    VARCHAR file_sha PK\n  }\n\n  file {\n    VARCHAR file_id\n    VARCHAR dataset_id\n    VARCHAR master_id\n    VARCHAR url\n    VARCHAR version\n    VARCHAR filename\n    VARCHAR local_path\n    VARCHAR data_node\n    VARCHAR checksum\n    VARCHAR checksum_type\n    INTEGER size\n    VARCHAR status\n    VARCHAR sha PK\n  }\n\n  query ||--|{ options : \"options_sha\"\n  query ||--|{ select : \"select_sha\"\n  select  }|--|| select_facet : \"select_sha\"\n  select_facet ||--|{ facet : \"facet_sha\"\n  query  }|--|| query_tag : \"query_sha\"\n  query_tag ||--|{ tag : \"tag_sha\"\n  query  }|--|| query_file : \"query_sha\"\n  query_file ||--|{ file : \"file_sha\"</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":"<p><code>esgpull</code> is a tool that simplifies usage of the ESGF Search API for data discovery, and manages procedures related to downloading and storing files from ESGF.</p> <p>To get started, follow Installation to set up a local <code>esgpull</code> install.</p>"},{"location":"quickstart/#data-discovery","title":"Data discovery","text":"<p>For a detailed explanation of the <code>search</code> command, read the data discovery page.</p>"},{"location":"quickstart/#searchadd-workflow-example","title":"Search/add workflow example","text":"<pre><code>esgpull search project:CMIP6 variable_id:tas experiment_id:'ssp*' member_id:r1i1p1f1 frequency:mon\nesgpull search project:CMIP6 variable_id:tas experiment_id:'ssp*' member_id:r1i1p1f1 frequency:mon --show\nesgpull search project:CMIP6 variable_id:tas experiment_id:'ssp*' member_id:r1i1p1f1 frequency:mon --detail 0\nesgpull add project:CMIP6 member_id:r1i1p1f1 frequency:mon --tag cmip6_monthly\nesgpull add --require cmip6_monthly variable_id:tas experiment_id:ssp245 --track\nesgpull add --require 2ddfa0 variable_id:tas experiment_id:ssp585 --track\n</code></pre>"},{"location":"quickstart/#converting-synda-selection-files","title":"Converting synda selection files","text":"<p>If you have existing selection files written for <code>synda</code>, you can convert those with no manual editing, using the <code>convert</code> command.</p> <p>Tagging</p> <p>If the first comment of a selection file contains a single word (symbols included, to allow emails), it will be used as a tag on the converted query.</p> <p>We will use these 2 selection files as examples:</p> example_cmip5.txt<pre><code># my_cmip5_query\nproject=CMIP5\nexperiment=historical\nfrequency=day\nensemble=r1i1p1\nvariable=tos\n</code></pre> example_cmip6.txt<pre><code># name.surname@institute.com\nmip_era=CMIP6\nproject=CMIP6\npriority=10900\nexperiment_id=1pctCO2-cdr\nvariable[Amon]=tas\nvariable[Lmon]=nbp\nvariable[Omon]=fgco2 mlotst hfds o2\n</code></pre> <p>Running the <code>convert</code> command with <code>--graph</code> will print the graph of queries the way it would appear after being added to the current install:</p> <p>Convert example<pre><code>esgpull convert example_cmip5.txt example_cmip6.txt --graph\n</code></pre> </p> <p>Notice how the \"root\" query from <code>example_cmip6.txt</code> is shown as <code>untracked</code>. This is done such that the root query's corresponding datasets are not installed.</p> <p>Since the root query always corresponds to a superset of the datasets return by any of its sub-queries, it would be pointless to download every dataset from the root query.</p>"},{"location":"quickstart/#adding-converted-queries","title":"Adding converted queries","text":"<p>To add the queries obtained from converting the selection files, they must first be exported to a yaml representation with:</p> <pre><code>esgpull convert example_cmip5.txt example_cmip6.txt --out examples_converted.yaml\n</code></pre> <p>Adding them is done through the <code>add</code> command, under the parameter <code>--query-file</code>:</p> <pre><code>esgpull add --query-file examples_converted.yaml\nesgpull show\n</code></pre>"},{"location":"quickstart/#downloading","title":"Downloading","text":"<pre><code>esgpull update &lt;id&gt;\nesgpull show\nesgpull download &lt;id&gt;\nesgpull status\n</code></pre> <p>Loop at the download page for more information.</p>"},{"location":"search/","title":"Data discovery","text":"<p>There are two ways to search for datasets with <code>esgpull</code>: facet and free-text search. Both are done through the <code>search</code> command.</p>"},{"location":"search/#facet-search","title":"Facet search","text":"<p>Facet search is performed with all terms using the facet syntax <code>&lt;name&gt;:&lt;value&gt;</code>, for which both name and value are matched exactly.</p> <p>Search CMIP6 datasets<pre><code>esgpull search project:CMIP6\n</code></pre> </p>"},{"location":"search/#multiple-values-for-a-facet","title":"Multiple values for a facet","text":"<p>Multiples values can be used by separating each value with a <code>,</code> comma.</p> <p>Single variable search<pre><code>esgpull search variable_id:c2h2 -0\nesgpull search variable_id:c2h6 -0\n</code></pre> </p> <p>Combine both variables in a single search<pre><code>esgpull search variable_id:c2h2,c2h6 -0\n</code></pre> </p> <p>Using spaces \"disconnects\" values from the facet name</p> <p></p> <p>If you don't know the facets' names</p> <p><code>esgpull</code> provides a handy way to print out facet names that can be used to refine a query:</p> <p><pre><code>esgpull search variable_id:c2h2,c2h6 --facets\n</code></pre> </p> <p>Using a facet that is not in this list will always result in a query with 0 corresponding datasets.</p>"},{"location":"search/#free-text-search","title":"Free-text search","text":"<p>Free-text search is performed on any term not using the <code>&lt;name&gt;:&lt;value&gt;</code> syntax. Each term is sent to the ESGF search API, which uses Apache Solr to match results.</p> <p>Solr syntax</p> <p>Solr will always try to match any of the search terms.</p> <pre><code>esgpull search surface temperature # will match either `surface` or `temperature`\n</code></pre> <p>To make sure all the words are matched, terms must be separated with <code>AND</code> and written between quotes <pre><code>esgpull search \"surface AND temperature\" # will match BOTH `surface` and `temperature`\n</code></pre></p>"},{"location":"search/#wildcard-syntax","title":"Wildcard syntax","text":"<p>A wildcard <code>*</code> can be used in both facet (value only) and free-text search, allowing for more controllable search results.</p> <p>Note that on most shells, the wildcard symbol should be inside <code>\"</code> quotes, to escape it from being expanded by the shell before <code>esgpull</code> receives any input.</p> <p>All initializations for areacella variable from piControl experiments<pre><code>esgpull search \"member_id:r1i*p1f1\" table_id:fx variable_id:areacella experiment_id:piControl\n</code></pre> </p>"},{"location":"search/#case-sensitivity","title":"Case sensitivity","text":"<p>For facet search, the case must match exactly, so <code>project:cmip6</code> will give entirely different results than <code>project:CMIP6</code>.</p> <p>In the case of free-text search, the opposite is true, case is entirely insensitive, and may lead to funky results.</p>"}]}